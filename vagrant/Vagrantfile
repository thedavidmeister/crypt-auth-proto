# -*- mode: ruby -*-
# vi: set ft=ruby :
Vagrant.require_version ">= 1.6.5"

# Vagrantfile API/syntax version. Don't touch unless you know what you're doing!
VAGRANTFILE_API_VERSION = "2"

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|

  ##
  # Configure the VM
  ##

  # Use apt-get caching if available
  # http://fgrehm.viewdocs.io/vagrant-cachier
  if Vagrant.has_plugin?("vagrant-cachier")
    config.cache.scope = :box
  end

  # http://www.vagrantbox.es/
  config.vm.box_url = "https://cloud-images.ubuntu.com/vagrant/precise/current/precise-server-cloudimg-amd64-vagrant-disk1.box"
  config.vm.box = "Official Ubuntu 12.04 daily Cloud Image amd64 (VirtualBox 4.1.12)"

  # We want to map the guest's port 80 (http) to some port on the host.
  # config.vm.network :forwarded_port, host: 4567, guest: 80
   #Vagrant.configure("2") do |config|
    # If this causes errors about "failing to create the host-only adapter"
    # @see https://coderwall.com/p/ydma0q
    config.vm.network "private_network", ip: "192.168.50.5"
  # end
  config.vm.hostname = "vagrant.ld"

  # We want to forward our ssh agent so we can connect to remote servers more
  # easily from within the box.
  config.ssh.forward_agent = true

  # This updates /etc/hosts for us. For this to work, we need the hostsupdater
  # plugin to be installed - https://github.com/cogitatio/vagrant-hostsupdater
  # $ vagrant plugin install vagrant-hostsupdater
  config.hostsupdater.aliases = [
    "vagrant.ld",
    "www.vagrant.ld"
  ]

  config.vm.provider "virtualbox" do |v|
    v.memory = 4096
  end

  # Share the docroot of our project as /shared with the guest VM.
  config.vm.synced_folder "../", "/foo",
     type: "rsync",
    # Exclude Drupal domains managed through provisioning scripts from rsync.
     exclude: [
      ".git",
      ".vagrant",
      "vagrant",
      "app/cache",
      "app/logs"
    ],
    args: [
      '-rvlc',
      '--delete',
      '--progress'
    ],
    owner: 'www-data',
    group: 'www-data',
    chown: true

  # Get puppet on the box.
  config.vm.provision :shell, :path => "scripts/puppet.sh"

  # Remove pesky "stdin not a tty" messages.
  config.vm.provision :shell, :path => "scripts/stdin_not_a_tty.sh"

  # User permissions.
  config.vm.provision :shell, :path => "scripts/permissions.sh"

  # FoundationDB
  config.vm.provision :shell, :path => "scripts/foundationdb.sh"

  # Run any provisioning scripts that need to happen *before* the default
  # manifest. This is essentially limited to updating apt-get repositories and
  # bug fixes.
  config.vm.provision "puppet" do |puppet|
    puppet.manifests_path = "manifests"
    puppet.manifest_file = "pre.pp"
    puppet.module_path = "modules"
    # puppet.hiera_config_path = "hiera.yaml"
    puppet.options = "--verbose --debug"
    # puppet.facter = facts
  end

  # Allow Puppet to do its magic.
  config.vm.provision "puppet" do |puppet|
    puppet.manifests_path = "manifests"
    puppet.manifest_file = "default.pp"
    puppet.module_path = "modules"
    # puppet.hiera_config_path = "hiera.yaml"
    puppet.options = "--verbose --debug"
    # puppet.facter = facts
  end

end
